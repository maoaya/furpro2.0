// üìä VERIFICADOR DE DESPLIEGUE NETLIFY - futpro.vip
// Ejecutar en consola del navegador despu√©s de 5 minutos

console.log('üîç VERIFICANDO DESPLIEGUE DE NETLIFY EN FUTPRO.VIP');
console.log('================================================');

// 1. Verificar informaci√≥n de despliegue
console.log('üìÖ Informaci√≥n de Sesi√≥n:');
console.log('- Timestamp:', new Date().toISOString());
console.log('- URL actual:', window.location.href);
console.log('- User Agent:', navigator.userAgent.split(' ')[0]);

// 2. Verificar archivos cr√≠ticos
async function verificarArchivos() {
  console.log('üì¶ VERIFICANDO ARCHIVOS DESPLEGADOS...');
  
  const archivos = [
    '/src/services/conexionEfectiva.js',
    '/src/pages/RegistroPage.jsx',
    '/src/components/AuthCallback.jsx'
  ];
  
  for (const archivo of archivos) {
    try {
      const response = await fetch(archivo);
      console.log(`- ${archivo}:`, response.ok ? '‚úÖ DISPONIBLE' : '‚ùå NO ENCONTRADO');
    } catch (e) {
      console.log(`- ${archivo}: ‚ùå ERROR - ${e.message}`);
    }
  }
}

// 3. Verificar m√≥dulos ES6
async function verificarModulos() {
  console.log('üîß VERIFICANDO M√ìDULOS ES6...');
  
  try {
    const modulo = await import('./src/services/conexionEfectiva.js');
    console.log('‚úÖ conexionEfectiva.js importado correctamente');
    
    if (modulo.conexionEfectiva) {
      console.log('‚úÖ Objeto conexionEfectiva disponible');
      console.log('- Funciones disponibles:', Object.keys(modulo.conexionEfectiva));
    } else {
      console.log('‚ùå Objeto conexionEfectiva no encontrado');
    }
    
  } catch (error) {
    console.log('‚ùå Error importando m√≥dulo:', error.message);
    console.log('üí° Puede que el despliegue a√∫n no est√© completo');
  }
}

// 4. Verificar estado de los botones
function verificarBotones() {
  console.log('üñ±Ô∏è VERIFICANDO BOTONES OAUTH...');
  
  const botones = Array.from(document.querySelectorAll('button'));
  const botonGoogle = botones.find(btn => btn.textContent.toLowerCase().includes('google'));
  const botonFacebook = botones.find(btn => btn.textContent.toLowerCase().includes('facebook'));
  
  console.log('- Bot√≥n Google:', botonGoogle ? '‚úÖ ENCONTRADO' : '‚ùå NO VISIBLE');
  console.log('- Bot√≥n Facebook:', botonFacebook ? '‚úÖ ENCONTRADO' : '‚ùå NO VISIBLE');
  
  if (botonGoogle) {
    console.log('- Google onClick:', botonGoogle.onclick ? '‚úÖ TIENE EVENTO' : '‚ùå SIN EVENTO');
  }
  
  if (botonFacebook) {
    console.log('- Facebook onClick:', botonFacebook.onclick ? '‚úÖ TIENE EVENTO' : '‚ùå SIN EVENTO');
  }
}

// 5. Test de funcionalidad
async function testFuncionalidad() {
  console.log('üß™ PROBANDO FUNCIONALIDAD OAUTH...');
  
  try {
    const { conexionEfectiva } = await import('./src/services/conexionEfectiva.js');
    
    // Test de verificaci√≥n (no hace OAuth real)
    const verificacion = await conexionEfectiva.verificarConexion(); 
    console.log('‚úÖ Test de verificaci√≥n:', verificacion ? 'EXITOSO' : 'FALL√ì');
    
  } catch (error) {
    console.log('‚ùå Error en test de funcionalidad:', error.message);
  }
}

// Ejecutar todas las verificaciones
async function ejecutarVerificacion() {
  await verificarArchivos();
  await verificarModulos();
  verificarBotones();
  await testFuncionalidad();
  
  console.log('================================================');
  console.log('üéØ RESULTADO DEL DIAGN√ìSTICO:');
  console.log('');
  console.log('Si todos los elementos muestran ‚úÖ, el despliegue fue exitoso.');
  console.log('Si hay ‚ùå, espera 2-3 minutos m√°s y ejecuta de nuevo.');
  console.log('');
  console.log('Para ejecutar de nuevo: location.reload() y volver a pegar este script');
  console.log('================================================');
}

// Ejecutar diagn√≥stico
ejecutarVerificacion();