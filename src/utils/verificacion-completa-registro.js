// üöÄ VERIFICACI√ìN COMPLETA DE REGISTRO EFECTIVO - futpro.vip
// Ejecutar en consola del navegador para verificar que todo funciona

console.log('üöÄ INICIANDO VERIFICACI√ìN COMPLETA DE REGISTRO EFECTIVO');
console.log('=========================================================');

async function verificacionCompleta() {
  
  // 1. Verificar entorno
  console.log('üåç PASO 1: VERIFICANDO ENTORNO');
  console.log('- Dominio:', window.location.hostname);
  console.log('- URL completa:', window.location.href);
  console.log('- Es producci√≥n:', window.location.hostname.includes('futpro.vip'));

  // 2. Verificar conexi√≥n efectiva
  console.log('\nüîß PASO 2: VERIFICANDO CONEXI√ìN EFECTIVA');
  try {
    const { conexionEfectiva } = await import('./src/services/conexionEfectiva.js');
    console.log('‚úÖ conexionEfectiva.js cargado correctamente');
    
    const conexion = await conexionEfectiva.verificarConexion();
    console.log('- Estado de conexi√≥n:', conexion ? '‚úÖ ACTIVA' : '‚ùå INACTIVA');
    
  } catch (error) {
    console.error('‚ùå Error cargando conexionEfectiva:', error.message);
    return;
  }

  // 3. Verificar formulario de registro
  console.log('\nüìù PASO 3: VERIFICANDO FORMULARIO DE REGISTRO');
  
  // Buscar formulario
  const formulario = document.querySelector('form');
  console.log('- Formulario encontrado:', formulario ? '‚úÖ S√ç' : '‚ùå NO');
  
  // Buscar botones OAuth
  const botones = Array.from(document.querySelectorAll('button'));
  const botonGoogle = botones.find(btn => btn.textContent.toLowerCase().includes('google'));
  const botonFacebook = botones.find(btn => btn.textContent.toLowerCase().includes('facebook'));
  
  console.log('- Bot√≥n Google:', botonGoogle ? '‚úÖ VISIBLE' : '‚ùå NO VISIBLE');
  console.log('- Bot√≥n Facebook:', botonFacebook ? '‚úÖ VISIBLE' : '‚ùå NO VISIBLE');
  
  if (botonGoogle) {
    console.log('  - Google habilitado:', !botonGoogle.disabled ? '‚úÖ S√ç' : '‚ùå NO');
    console.log('  - Google tiene onClick:', botonGoogle.onclick ? '‚úÖ S√ç' : '‚ùå NO');
  }
  
  if (botonFacebook) {
    console.log('  - Facebook habilitado:', !botonFacebook.disabled ? '‚úÖ S√ç' : '‚ùå NO');
    console.log('  - Facebook tiene onClick:', botonFacebook.onclick ? '‚úÖ S√ç' : '‚ùå NO');
  }

  // 4. Verificar datos pendientes
  console.log('\nüíæ PASO 4: VERIFICANDO DATOS TEMPORALES');
  const perfilPendiente = localStorage.getItem('pendingProfileData');
  const progreso = localStorage.getItem('registroProgreso');
  const tempData = localStorage.getItem('tempRegistroData');
  
  console.log('- Perfil pendiente:', perfilPendiente ? '‚úÖ EXISTE' : '‚ùå NO EXISTE');
  console.log('- Progreso guardado:', progreso ? '‚úÖ EXISTE' : '‚ùå NO EXISTE');
  console.log('- Datos temporales:', tempData ? '‚úÖ EXISTE' : '‚ùå NO EXISTE');
  
  if (perfilPendiente) {
    try {
      const datos = JSON.parse(perfilPendiente);
      console.log('  - Nombre en perfil:', datos.nombre || 'NO DEFINIDO');
      console.log('  - Email en perfil:', datos.email || 'NO DEFINIDO');
    } catch (e) {
      console.log('  - Error parseando perfil pendiente');
    }
  }

  // 5. Test de funcionalidad OAuth (simulado)
  console.log('\nüß™ PASO 5: TEST DE FUNCIONALIDAD OAUTH');
  
  try {
    const { conexionEfectiva } = await import('./src/services/conexionEfectiva.js');
    
    // Simular verificaci√≥n sin hacer OAuth real
    console.log('- Funci√≥n registrarConGoogle:', typeof conexionEfectiva.registrarConGoogle === 'function' ? '‚úÖ DISPONIBLE' : '‚ùå NO DISPONIBLE');
    console.log('- Funci√≥n registrarConFacebook:', typeof conexionEfectiva.registrarConFacebook === 'function' ? '‚úÖ DISPONIBLE' : '‚ùå NO DISPONIBLE');
    console.log('- Funci√≥n procesarCallback:', typeof conexionEfectiva.procesarCallback === 'function' ? '‚úÖ DISPONIBLE' : '‚ùå NO DISPONIBLE');
    
  } catch (error) {
    console.error('‚ùå Error verificando funciones OAuth:', error.message);
  }

  // 6. Verificar estad√≠sticas (si hay acceso)
  console.log('\nüìä PASO 6: VERIFICANDO ESTAD√çSTICAS DE REGISTRO');
  
  try {
    const { conexionEfectiva } = await import('./src/services/conexionEfectiva.js');
    const stats = await conexionEfectiva.obtenerEstadisticasRegistro();
    
    if (stats.success) {
      console.log('‚úÖ Base de datos accesible - √öltimos registros:', stats.usuarios.length);
    } else {
      console.log('‚ö†Ô∏è No se pudieron obtener estad√≠sticas (normal en algunos casos)');
    }
    
  } catch (error) {
    console.log('‚ö†Ô∏è Estad√≠sticas no disponibles (normal en algunos casos)');
  }

  // Resumen final
  console.log('\n=========================================================');
  console.log('üéØ RESUMEN DE VERIFICACI√ìN:');
  console.log('');
  console.log('‚úÖ = Todo funciona correctamente');  
  console.log('‚ùå = Hay un problema que debe corregirse');
  console.log('‚ö†Ô∏è = Advertencia o informaci√≥n');
  console.log('');
  console.log('üìã PR√ìXIMOS PASOS:');
  console.log('1. Si todo muestra ‚úÖ, prueba completar el registro');
  console.log('2. Si hay ‚ùå, revisa los errores espec√≠ficos');
  console.log('3. Completa el formulario y haz clic en Google/Facebook');
  console.log('4. El usuario debe guardarse permanentemente en la BD');
  console.log('=========================================================');
}

// Funci√≥n para test r√°pido de botones
function testRapidoBotones() {
  console.log('\nüîÑ TEST R√ÅPIDO DE BOTONES (sin OAuth real)');
  
  const botones = Array.from(document.querySelectorAll('button'));
  const botonGoogle = botones.find(btn => btn.textContent.toLowerCase().includes('google'));
  const botonFacebook = botones.find(btn => btn.textContent.toLowerCase().includes('facebook'));
  
  if (botonGoogle) {
    console.log('üîµ Simulando click en Google...');
    try {
      // Solo verificar que el bot√≥n responde, no hacer OAuth real
      const onclick = botonGoogle.onclick;
      if (onclick) {
        console.log('‚úÖ Bot√≥n Google tiene funcionalidad');
      } else {
        console.log('‚ùå Bot√≥n Google no tiene funcionalidad');
      }
    } catch (e) {
      console.log('‚ùå Error en bot√≥n Google:', e.message);
    }
  }
  
  if (botonFacebook) {
    console.log('üìò Simulando click en Facebook...');
    try {
      const onclick = botonFacebook.onclick;
      if (onclick) {
        console.log('‚úÖ Bot√≥n Facebook tiene funcionalidad');
      } else {
        console.log('‚ùå Bot√≥n Facebook no tiene funcionalidad');
      }
    } catch (e) {
      console.log('‚ùå Error en bot√≥n Facebook:', e.message);
    }
  }
}

// Ejecutar verificaci√≥n completa
verificacionCompleta();

// Ofrecer test r√°pido adicional
console.log('\nüí° Para test r√°pido de botones, ejecuta: testRapidoBotones()');

// Hacer la funci√≥n disponible globalmente
window.testRapidoBotones = testRapidoBotones;
window.verificacionCompleta = verificacionCompleta;